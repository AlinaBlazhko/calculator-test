<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="10" ignored="0" total="53" passed="43">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="88" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
    <groups>
      <group name="trigonometric">
        <method signature="CosTest.cosTest(double, double)[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="cosTest" class="testng.tests.CosTest"/>
        <method signature="CtgTest.ctgTest(double, double)[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="ctgTest" class="testng.tests.CtgTest"/>
        <method signature="SinTest.sinTest(double, double)[pri:0, instance:testng.tests.SinTest@3f102e87]" name="sinTest" class="testng.tests.SinTest"/>
        <method signature="TgTest.cosTest(double, double)[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="cosTest" class="testng.tests.TgTest"/>
      </group> <!-- trigonometric -->
    </groups>
    <test name="Test classes for trigonometric methods" duration-ms="88" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
      <class name="testng.tests.TgTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="cosTest(double, double)[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="cosTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.7853981633974483]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="cosTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.141592653589793]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.TgTest.cosTest(TgTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="cosTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.TgTest.cosTest(TgTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.TgTest@27abe2cd]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.TgTest -->
      <class name="testng.tests.SinTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="sinTest(double, double)[pri:0, instance:testng.tests.SinTest@3f102e87]" name="sinTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="valuesForSin" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.5707963267948966]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinTest -->
        <test-method status="PASS" signature="sinTest(double, double)[pri:0, instance:testng.tests.SinTest@3f102e87]" name="sinTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForSin" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="sinTest(double, double)[pri:0, instance:testng.tests.SinTest@3f102e87]" name="sinTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForSin" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.141592653589793]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="FAIL" signature="sinTest(double, double)[pri:0, instance:testng.tests.SinTest@3f102e87]" name="sinTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForSin" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.5235987755982988]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.SinTest.sinTest(SinTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sinTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SinTest@3f102e87]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.SinTest -->
      <class name="testng.tests.CtgTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="FAIL" signature="ctgTest(double, double)[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="ctgTest" duration-ms="2" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.7853981633974483]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.CtgTest.ctgTest(CtgTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ctgTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="ctgTest(double, double)[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="ctgTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ctgTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="FAIL" signature="ctgTest(double, double)[pri:0, instance:testng.tests.CtgTest@5ecddf8f]" name="ctgTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.5707963267948966]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.CtgTest.ctgTest(CtgTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ctgTest -->
      </class> <!-- testng.tests.CtgTest -->
      <class name="testng.tests.CosTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="before" is-config="true" duration-ms="7" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="cosTest" duration-ms="3" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.5707963267948966]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.CosTest.cosTest(CosTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="cosTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.CosTest.cosTest(CosTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="FAIL" signature="cosTest(double, double)[pri:0, instance:testng.tests.CosTest@6c629d6e]" name="cosTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForCos" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.141592653589793]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.CosTest.cosTest(CosTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cosTest -->
      </class> <!-- testng.tests.CosTest -->
    </test> <!-- Test classes for trigonometric methods -->
  </suite> <!-- Suite -->
  <suite name="Suite (1)" duration-ms="43" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:44Z">
    <groups>
      <group name="arithmetic">
        <method signature="DivDoubleTest.divDoubleTest(double, double, double)[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="divDoubleTest" class="testng.tests.DivDoubleTest"/>
        <method signature="DivLongTest.sumDoubleTest(long, long, long)[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="sumDoubleTest" class="testng.tests.DivLongTest"/>
        <method signature="MultDoubleTest.multDoubleTest(double, double, double)[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="multDoubleTest" class="testng.tests.MultDoubleTest"/>
        <method signature="MultLongTest.multLongTest(long, long, long)[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="multLongTest" class="testng.tests.MultLongTest"/>
        <method signature="PowTest.twoPow2(double, double, double)[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="twoPow2" class="testng.tests.PowTest"/>
        <method signature="SqrtTest.sqrtTest(double, double)[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="sqrtTest" class="testng.tests.SqrtTest"/>
        <method signature="SubDoubleTest.subDoubleTest(double, double, double)[pri:0, instance:testng.tests.SubDoubleTest@387c703b]" name="subDoubleTest" class="testng.tests.SubDoubleTest"/>
        <method signature="SubLongTest.subLongTest(long, long, long)[pri:0, instance:testng.tests.SubLongTest@224aed64]" name="subLongTest" class="testng.tests.SubLongTest"/>
        <method signature="SumDoubleTest.sumDoubleTest(double, double, double)[pri:0, instance:testng.tests.SumDoubleTest@c39f790]" name="sumDoubleTest" class="testng.tests.SumDoubleTest"/>
      </group> <!-- arithmetic -->
    </groups>
    <test name="Test classes for arithmetic methods" duration-ms="43" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:44Z">
      <class name="testng.tests.SubDoubleTest">
        <test-method status="PASS" signature="subDoubleTest(double, double, double)[pri:0, instance:testng.tests.SubDoubleTest@387c703b]" name="subDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSub" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subDoubleTest -->
        <test-method status="PASS" signature="subDoubleTest(double, double, double)[pri:0, instance:testng.tests.SubDoubleTest@387c703b]" name="subDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSub" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-4.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subDoubleTest -->
        <test-method status="PASS" signature="subDoubleTest(double, double, double)[pri:0, instance:testng.tests.SubDoubleTest@387c703b]" name="subDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSub" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subDoubleTest -->
        <test-method status="PASS" signature="subDoubleTest(double, double, double)[pri:0, instance:testng.tests.SubDoubleTest@387c703b]" name="subDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSub" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-20.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-10.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subDoubleTest -->
      </class> <!-- testng.tests.SubDoubleTest -->
      <class name="testng.tests.PowTest">
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="twoPow2(double, double, double)[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="twoPow2" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForPow" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoPow2 -->
        <test-method status="PASS" signature="twoPow2(double, double, double)[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="twoPow2" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForPow" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoPow2 -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="twoPow2(double, double, double)[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="twoPow2" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForPow" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.01]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoPow2 -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.PowTest@1bc6a36e]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.PowTest -->
      <class name="testng.tests.DivDoubleTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="FAIL" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="divDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testng.tests.DivDoubleTest.divDoubleTest(DivDoubleTest.java:14)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="divDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-4.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="divDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-5.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="divDoubleTest(double, double, double)[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="divDoubleTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divDoubleTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivDoubleTest@2d6a9952]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.DivDoubleTest -->
      <class name="testng.tests.MultLongTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="multLongTest(long, long, long)[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="multLongTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-50]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multLongTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="multLongTest(long, long, long)[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="multLongTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multLongTest -->
        <test-method status="PASS" signature="multLongTest(long, long, long)[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="multLongTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[143]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multLongTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="multLongTest(long, long, long)[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="multLongTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multLongTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultLongTest@629f0666]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.MultLongTest -->
      <class name="testng.tests.SqrtTest">
        <test-method status="PASS" signature="sqrtTest(double, double)[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="sqrtTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForPow" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="sqrtTest(double, double)[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="sqrtTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="valuesForPow" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="sqrtTest(double, double)[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="sqrtTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForPow" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-900.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[30.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sqrtTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.SqrtTest@1ff8b8f]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.SqrtTest -->
      <class name="testng.tests.MultDoubleTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="multDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="multDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-4.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-12.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="multDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="multDoubleTest(double, double, double)[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="multDoubleTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForMult" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-2.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multDoubleTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.MultDoubleTest@3930015a]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.MultDoubleTest -->
      <class name="testng.tests.SumDoubleTest">
        <test-method status="PASS" signature="sumDoubleTest(double, double, double)[pri:0, instance:testng.tests.SumDoubleTest@c39f790]" name="sumDoubleTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSum" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2.2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2.8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
        <test-method status="PASS" signature="sumDoubleTest(double, double, double)[pri:0, instance:testng.tests.SumDoubleTest@c39f790]" name="sumDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSum" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-4.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
        <test-method status="PASS" signature="sumDoubleTest(double, double, double)[pri:0, instance:testng.tests.SumDoubleTest@c39f790]" name="sumDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="doubleValuesForSum" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
      </class> <!-- testng.tests.SumDoubleTest -->
      <class name="testng.tests.DivLongTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="FAIL" signature="sumDoubleTest(long, long, long)[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="sumDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Attempt to divide by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Attempt to divide by zero
at com.epam.tat.module4.Calculator.div(Calculator.java:34)
at testng.tests.DivLongTest.sumDoubleTest(DivLongTest.java:13)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="sumDoubleTest(long, long, long)[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="sumDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
        <test-method status="PASS" signature="sumDoubleTest(long, long, long)[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="sumDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="sumDoubleTest(long, long, long)[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="sumDoubleTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForDiv" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sumDoubleTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.DivLongTest@22a71081]" name="after" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.DivLongTest -->
      <class name="testng.tests.SubLongTest">
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:testng.tests.SubLongTest@224aed64]" name="subLongTest" duration-ms="3" started-at="2018-06-27T05:34:43Z" data-provider="longValuesForSum" finished-at="2018-06-27T05:34:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:testng.tests.SubLongTest@224aed64]" name="subLongTest" duration-ms="0" started-at="2018-06-27T05:34:44Z" data-provider="longValuesForSum" finished-at="2018-06-27T05:34:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:testng.tests.SubLongTest@224aed64]" name="subLongTest" duration-ms="0" started-at="2018-06-27T05:34:44Z" data-provider="longValuesForSum" finished-at="2018-06-27T05:34:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[143]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[143]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:testng.tests.SubLongTest@224aed64]" name="subLongTest" duration-ms="3" started-at="2018-06-27T05:34:44Z" data-provider="longValuesForSum" finished-at="2018-06-27T05:34:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-120]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-120]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
        <test-method status="PASS" signature="subLongTest(long, long, long)[pri:0, instance:testng.tests.SubLongTest@224aed64]" name="subLongTest" duration-ms="1" started-at="2018-06-27T05:34:44Z" data-provider="longValuesForSum" finished-at="2018-06-27T05:34:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-130]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-120]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- subLongTest -->
      </class> <!-- testng.tests.SubLongTest -->
    </test> <!-- Test classes for arithmetic methods -->
  </suite> <!-- Suite (1) -->
  <suite name="Suite (0)" duration-ms="10" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
    <groups>
      <group name="other">
        <method signature="IsNegativeTest.isNegativeTest(long, boolean)[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="isNegativeTest" class="testng.tests.IsNegativeTest"/>
        <method signature="IsPositiveTest.isPositiveTest(long, boolean)[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="isPositiveTest" class="testng.tests.IsPositiveTest"/>
      </group> <!-- other -->
    </groups>
    <test name="Test classes for other methods" duration-ms="10" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
      <class name="testng.tests.IsNegativeTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="isNegativeTest(long, boolean)[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="isNegativeTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="valuesForIsNegative" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeTest -->
        <test-method status="PASS" signature="isNegativeTest(long, boolean)[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="isNegativeTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="valuesForIsNegative" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="isNegativeTest(long, boolean)[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="isNegativeTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForIsNegative" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isNegativeTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.IsNegativeTest@ba4d54]" name="after" is-config="true" duration-ms="2" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.IsNegativeTest -->
      <class name="testng.tests.IsPositiveTest">
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="before" is-config="true" duration-ms="1" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="isPositiveTest(long, boolean)[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="isPositiveTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForIsPositive" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveTest -->
        <test-method status="PASS" signature="isPositiveTest(long, boolean)[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="isPositiveTest" duration-ms="1" started-at="2018-06-27T05:34:43Z" data-provider="valuesForIsPositive" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveTest -->
        <test-method status="PASS" signature="before()[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="before" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="isPositiveTest(long, boolean)[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="isPositiveTest" duration-ms="0" started-at="2018-06-27T05:34:43Z" data-provider="valuesForIsPositive" finished-at="2018-06-27T05:34:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isPositiveTest -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method status="PASS" signature="after()[pri:0, instance:testng.tests.IsPositiveTest@12bc6874]" name="after" is-config="true" duration-ms="0" started-at="2018-06-27T05:34:43Z" finished-at="2018-06-27T05:34:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- testng.tests.IsPositiveTest -->
    </test> <!-- Test classes for other methods -->
  </suite> <!-- Suite (0) -->
  <suite name="Default Suite" duration-ms="0" started-at="2018-06-27T05:34:44Z" finished-at="2018-06-27T05:34:44Z">
    <groups>
    </groups>
  </suite> <!-- Default Suite -->
</testng-results>
